import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import javax.swing.Timer;

import com.sun.nio.sctp.*;

public class FileSystem implements Runnable, ActionListener {
	static final int SHARED_MODE = 1;
	static final int EXCLUSIVE_MODE = 2;
	static final int RELEASE = 3;
	private static final int TRUE = 0;
	private static final int FALSE = -1;
	
	int[] portN = new int[45];
	String[] ipAddr = new String[45];
	
	int[] lockMembers = new int[45];

	Timer timer;
	private SctpChannel localSock;
	
	static int sharedCount = 0;
	static int readQSize;
	static int writQSize;
	static int versionNum = 0;
	static int accessMode;
	
	public void run() {
		System.out.println("* FS: Thread Started");
		readIP();
		String rcvData;
		String rplyData = null;
		String[] tokens;
		SctpChannel rcvSocket = null;
		SctpServerChannel rcvServer;
		InetSocketAddress serverAddr;
		ByteBuffer buffer = ByteBuffer.allocateDirect(100);
		CharBuffer charbuf = buffer.asCharBuffer();
		Charset charset = Charset.forName("ISO-8859-1");
		CharsetEncoder encoder = charset.newEncoder();
		CharsetDecoder decoder = charset.newDecoder();
		MessageInfo msgInfo = MessageInfo.createOutgoing(null, 0);

		try {

			rcvServer = SctpServerChannel.open();
			serverAddr = new InetSocketAddress(portN[Application.procId-1]);
			rcvServer.bind(serverAddr);
			System.out.println("* FS: Socket Created with PN: " + portN[Application.procId - 1]);

			while(true)
			{
				rcvSocket = rcvServer.accept();
				buffer.clear();
				rcvSocket.receive(buffer, null, null);
				buffer.flip();
				
				rcvData = decoder.decode(buffer).toString();
				System.out.println("\n* -------------------------------------------");
				System.out.println("* Receive Buffer Contents are: " + rcvData);
	
				tokens = rcvData.split("-");
				System.out.println("* Mode: " + tokens[0]);
				if(RELEASE == Integer.parseInt(tokens[0]))
				{
					if(SHARED_MODE == accessMode)
					{
						if(1 == sharedCount) 
							accessMode = 0;
						else
							sharedCount--;
					}
					else if(EXCLUSIVE_MODE == accessMode)
					{
						accessMode = 0;
					}
					continue;
				}
				if(EXCLUSIVE_MODE == Integer.parseInt(tokens[0]))
				{
					if(0 == accessMode)
					{
						rplyData = Integer.toString(versionNum);
						System.out.println("* Reply Buffer Contents are: " + rplyData);
						accessMode = EXCLUSIVE_MODE;
					}
					else
					{
						rplyData = Integer.toString(FALSE);
						System.out.println("* Reply Buffer Contents are: " + rplyData);
					}
				}
				else if(SHARED_MODE == Integer.parseInt(tokens[0]))
				{
					if(EXCLUSIVE_MODE != accessMode)
					{
						rplyData = Integer.toString(versionNum);
						System.out.println("* Reply Buffer Contents are: " + rplyData);
						accessMode = SHARED_MODE;
						sharedCount++;
					}
					else
					{
						rplyData = Integer.toString(FALSE);
						System.out.println("* Reply Buffer Contents are: " + rplyData);
					}
				}
				else
				{
					rplyData = Integer.toString(FALSE);
					System.out.println("* FS: Reply Buffer Contents are: " + rplyData);
				}
	
				charbuf.clear();
				charbuf.put(rplyData);
				charbuf.flip();
				
				buffer.clear();
				encoder.encode(charbuf, buffer, true);
				buffer.flip();
				
	//			try {
	//				Thread.sleep(5000);
	//			} catch (InterruptedException e1) {
	//				// TODO Auto-generated catch block
	//				e1.printStackTrace();
	//			}
				
				try {
					rcvSocket.send(buffer, msgInfo);
				} catch (IOException e) {
				//	e.printStackTrace();
					System.out.println("* Reply Failed");
				}
				buffer.clear();
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		buffer.clear();
		try {
			rcvSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("* FS: Thread Woke Up and Exiting");
		System.out.println("* ----------------------------------");
		return;
	}

	public int acquireLock(int mode) {
		
		int lockCount = 0;
		String sendData = null;
		String rplyData = null;
		SctpChannel[] sendSocket = new SctpChannel[Application.totalNodes];
		InetSocketAddress serverAddr = null;
		ByteBuffer buffer = ByteBuffer.allocateDirect(100);
		CharBuffer charbuf = buffer.asCharBuffer();
		MessageInfo msgInfo = MessageInfo.createOutgoing(null, 0);
		Charset charset = Charset.forName("ISO-8859-1");
		CharsetEncoder encoder = charset.newEncoder();
		CharsetDecoder decoder = charset.newDecoder();


		timer = new Timer(2000, this);
		lockCount = 1;
		int lockSize = 0;
		
		if(SHARED_MODE == mode) lockSize = readQSize ;
		else if(EXCLUSIVE_MODE == mode) lockSize = writQSize;
		
		/* Send a request for Lock  and Receive a Reply */
		for (int i = 0; i < Application.totalNodes; i++) {
			if (i + 1 == Application.procId)
				continue;
			
			if (lockSize == lockCount) break;
			
			System.out.println("* ---------------------------------------");
			System.out.println("* FS: Connecting to: " + ipAddr[i] + ", " + portN[i]);
			serverAddr = new InetSocketAddress(ipAddr[i], portN[i]);

			try {
				sendSocket[i] = SctpChannel.open(serverAddr, 0, 0);
			} catch (IOException e) {
			//	e.printStackTrace();
				System.out.println("* FS: Connection Refused");
				return -1;
			}

			sendData = Integer.toString(mode);
			
			charbuf.clear();
			charbuf.put(sendData);
			charbuf.flip();
			
			buffer.clear();
			encoder.encode(charbuf, buffer, true);
			buffer.flip();

			try {
				sendSocket[i].send(buffer, msgInfo);
			} catch (IOException e) {
			//	e.printStackTrace();
				System.out.println("* FS: Send Failed");
				return -1;	
			}
			System.out.println("* FS: Send Data: " + sendData);
			buffer.clear();
			charbuf.clear();
			
			timer.start();
			System.out.println("* FS: Timer Started");
			localSock = sendSocket[i];
		
			try {
				buffer.clear();
				sendSocket[i].receive(buffer, null, null);
				
				timer.stop();
				System.out.println("* FS: Timer Stopped");
				
				buffer.flip();
				try {
					rplyData = decoder.decode(buffer).toString();
				} catch (CharacterCodingException e) {
				//	e.printStackTrace();
					System.out.println("* FS: Decoding Error");
					return -1;
				}
				System.out.println("* FS: Reply Buffer Contents are: " + (0 == Integer.parseInt(rplyData)));

				sendSocket[i].close();
				
				if(TRUE == Integer.parseInt(rplyData))
				{
					lockMembers[lockCount - 1] = i+1;
					lockCount++;
				}

			} catch (IOException e) {
			//	e.printStackTrace();
				System.out.println("* FS: Receive Failed");
				return -1;
			}
		}
		System.out.println("* ---------------------------------------");

		for(int i = 0; i < lockSize; i++)
			System.out.println(lockMembers[i] + ", ");
		if (lockSize == lockCount) return 0;
		else return -1;
	}

	public void initialize() {
		readIP();
		writQSize = Application.totalNodes / 2 + 1;
		readQSize = Application.totalNodes - writQSize + 1;
		System.out.println("* FS: Read Quorum Size: " + readQSize);
		System.out.println("* FS: Writ Quorum Size: " + writQSize);
		(new Thread(new FileSystem())).start();
	}

	public void readIP() {
		int node = 0;
		BufferedReader br = null;
		String strLine = "";
		String[] tokens;
		try {
			br = new BufferedReader(new FileReader("ipconfig.dat"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		try {
			while ((strLine = br.readLine()) != null) {
				tokens = strLine.split(" ");
				portN[node] = Integer.parseInt(tokens[1]);
				ipAddr[node] = tokens[2];
				node++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		System.out.println("* FS: Timer Expired");
		try {
			if(null != this.localSock) {
				if(this.localSock.isOpen()) {
					timer.stop();
					this.localSock.close(); 
					System.out.println("* FS: Closing Socket since no reply");
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	protected int acquireMyLock(int mode) {
		System.out.println("* FS: Current Access Mode: " + ((accessMode == 0) ? "NONE" : ((accessMode == 1) ? "SHARED" : "EXCLUSIVE")));
		if (EXCLUSIVE_MODE != accessMode && EXCLUSIVE_MODE != mode) 
		{
			accessMode = SHARED_MODE;
			sharedCount++;
			return 0;
		}
		else if(EXCLUSIVE_MODE == mode && 0 == accessMode){
			accessMode = EXCLUSIVE_MODE;
			return 0;
		}
		else return -1;
	}

	protected int releaseMyLock(int mode) {
		if(SHARED_MODE == mode)
		{
			if(1 == sharedCount)
				accessMode = 0;
			else
				sharedCount--;
		}
		else if(EXCLUSIVE_MODE == mode)
		{
			accessMode = 0;
		}
		return 0;
	}

	protected int releaseLock(int mode) {
		String sendData = null;
		SctpChannel[] sendSocket = new SctpChannel[Application.totalNodes];
		InetSocketAddress serverAddr = null;
		ByteBuffer buffer = ByteBuffer.allocateDirect(100);
		CharBuffer charbuf = buffer.asCharBuffer();
		MessageInfo msgInfo = MessageInfo.createOutgoing(null, 0);
		Charset charset = Charset.forName("ISO-8859-1");
		CharsetEncoder encoder = charset.newEncoder();

		int lockSize = 0;
		
		if(SHARED_MODE == mode) lockSize = readQSize ;
		else if(EXCLUSIVE_MODE == mode) lockSize = writQSize;
		
		System.out.println("* ---------------------------------------");
		System.out.println("* Releasing Locks");
		System.out.println("* ---------------------------------------");

		/* Send a request for Lock  and Receive a Reply */
		for (int i = 0; i < lockSize-1; i++) {
			
			System.out.println("* ---------------------------------------");
			System.out.println("* FS: Connecting to: " + ipAddr[lockMembers[i]] + ", " + portN[lockMembers[i]]);
			serverAddr = new InetSocketAddress(ipAddr[lockMembers[i]], portN[lockMembers[i]]);

			try {
				sendSocket[i] = SctpChannel.open(serverAddr, 0, 0);
			} catch (IOException e) {
			//	e.printStackTrace();
				System.out.println("* FS: Connection Refused");
				return -1;
			}

			sendData = Integer.toString(RELEASE);
			
			charbuf.clear();
			charbuf.put(sendData);
			charbuf.flip();
			
			buffer.clear();
			encoder.encode(charbuf, buffer, true);
			buffer.flip();

			try {
				sendSocket[i].send(buffer, msgInfo);
			} catch (IOException e) {
			//	e.printStackTrace();
				System.out.println("* FS: Send Failed");
				return -1;	
			}
			System.out.println("* FS: Send Data: " + sendData);
			buffer.clear();
			charbuf.clear();
			
		}
		return 0;
	}
}
