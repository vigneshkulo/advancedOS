import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import javax.swing.Timer;

import com.sun.nio.sctp.*;

public class FileSystem implements Runnable, ActionListener {
	private static final int SHARED_MODE = 0;
	int[] portN = new int[45];
	String[] ipAddr = new String[45];

	Timer timer;
	private SctpChannel localSock;
	
	static int readQSize;
	static int writQSize;

	public void run() {
		System.out.println("* FS: Thread Started");
		readIP();
		String rcvData;
		String rplyData;
		String[] tokens;
		SctpChannel rcvSocket = null;
		SctpServerChannel rcvServer;
		InetSocketAddress serverAddr;
		ByteBuffer buffer = ByteBuffer.allocateDirect(100);
		CharBuffer charbuf = buffer.asCharBuffer();
		Charset charset = Charset.forName("ISO-8859-1");
		CharsetEncoder encoder = charset.newEncoder();
		CharsetDecoder decoder = charset.newDecoder();
		MessageInfo msgInfo = MessageInfo.createOutgoing(null, 0);

		try {

			rcvServer = SctpServerChannel.open();
			serverAddr = new InetSocketAddress(portN[Application.procId-1]);
			rcvServer.bind(serverAddr);
			System.out.println("* FS: Socket Created with PN: " + portN[Application.procId - 1]);

			rcvSocket = rcvServer.accept();
			buffer.clear();
			rcvSocket.receive(buffer, null, null);
			buffer.flip();
			
			rcvData = decoder.decode(buffer).toString();
			System.out.println("\n* -------------------------------------------");
			System.out.println("* Receive Buffer Contents are: " + rcvData);

			tokens = rcvData.split("-");
			System.out.println("* Mode: " + tokens[0] + ", File Name: "
					+ tokens[1]);
			
			rplyData = Integer.toString(SHARED_MODE) + "-" + "File " + Application.procId;
			System.out.println("* Reply Buffer Contents are: " + rplyData);

			charbuf.clear();
			charbuf.put(rplyData);
			charbuf.flip();
			
			buffer.clear();
			encoder.encode(charbuf, buffer, true);
			buffer.flip();
			
//			try {
//				Thread.sleep(5000);
//			} catch (InterruptedException e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
			
			try {
				rcvSocket.send(buffer, msgInfo);
			} catch (IOException e) {
			//	e.printStackTrace();
				System.out.println("* Reply Failed");
			}
			buffer.clear();

		} catch (IOException e) {
			e.printStackTrace();
		}
		buffer.clear();
		try {
			rcvSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("* FS: Thread Woke Up and Exiting");
		System.out.println("* ----------------------------------");
		return;
	}

	public int acquireLock() {
		
		int lockCount = 0;
		String sendData = null;
		String rplyData = null;
		SctpChannel[] sendSocket = new SctpChannel[Application.totalNodes];
		InetSocketAddress serverAddr = null;
		ByteBuffer buffer = ByteBuffer.allocateDirect(100);
		CharBuffer charbuf = buffer.asCharBuffer();
		MessageInfo msgInfo = MessageInfo.createOutgoing(null, 0);
		Charset charset = Charset.forName("ISO-8859-1");
		CharsetEncoder encoder = charset.newEncoder();
		CharsetDecoder decoder = charset.newDecoder();

		System.out.println("* ---------------------------------------");

		timer = new Timer(2000, this);
		
		/* Send a request for Lock  and Receive a Reply */
		for (int i = 0; i < Application.totalNodes; i++) {
			if (i + 1 == Application.procId)
				continue;
			
			if (readQSize == lockCount) return 0;
			
			System.out.println("* Connecting to: " + ipAddr[i] + ", " + portN[i]);
			serverAddr = new InetSocketAddress(ipAddr[i], portN[i]);

			try {
				sendSocket[i] = SctpChannel.open(serverAddr, 0, 0);
			} catch (IOException e) {
				e.printStackTrace();
			}

			sendData = Integer.toString(SHARED_MODE) + "-" + "File 1";
			
			charbuf.clear();
			charbuf.put(sendData);
			charbuf.flip();
			
			buffer.clear();
			encoder.encode(charbuf, buffer, true);
			buffer.flip();

			try {
				sendSocket[i].send(buffer, msgInfo);
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println("* Send Data: " + sendData);
			buffer.clear();
			charbuf.clear();
			
			timer.start();
			System.out.println("* FS: Timer Started");
			localSock = sendSocket[i];
		
			try {
				buffer.clear();
				sendSocket[i].receive(buffer, null, null);
				
				timer.stop();
				System.out.println("* FS: Timer Stopped");
				
				lockCount++;
				
				buffer.flip();
				try {
					rplyData = decoder.decode(buffer).toString();
				} catch (CharacterCodingException e) {
					e.printStackTrace();
				}
				System.out.println("* Reply Buffer Contents are: " + rplyData);

				sendSocket[i].close();

			} catch (IOException e) {
			//	e.printStackTrace();
			}
		}
		System.out.println("* ---------------------------------------");
		
		return -1;
	}

	public void initialize() {
		readIP();
		writQSize = Application.totalNodes / 2 + 1;
		readQSize = writQSize;
		System.out.println("* Read Quorum Size: " + readQSize);
		System.out.println("* Writ Quorum Size: " + writQSize);
		(new Thread(new FileSystem())).start();
	}

	public void readIP() {
		int node = 0;
		BufferedReader br = null;
		String strLine = "";
		String[] tokens;
		try {
			br = new BufferedReader(new FileReader("ipconfig.dat"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		try {
			while ((strLine = br.readLine()) != null) {
				tokens = strLine.split(" ");
				portN[node] = Integer.parseInt(tokens[1]);
				ipAddr[node] = tokens[2];
				node++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		System.out.println("* FS: Timer Expired");
		try {
			if(null != this.localSock) {
				if(this.localSock.isOpen()) {
					timer.stop();
					this.localSock.close(); 
					System.out.println("* FS: Closing Socket since no reply");
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
